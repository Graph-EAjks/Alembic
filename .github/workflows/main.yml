# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
#     branches: [ master ]
  pull_request:
#     branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  linux:
    name: 'Linux VFX CY${{ matrix.vfx-cy }}
      <${{ matrix.compiler-desc }},
       config=${{ matrix.build-type }},
       cxx=${{ matrix.cxx-standard }}>'
    # GH-hosted VM. The build runs in CentOS 7 'container' defined below.
    runs-on: ubuntu-latest
    container:
      # DockerHub: https://hub.docker.com/u/aswf
      # Source: https://github.com/AcademySoftwareFoundation/aswf-docker
      image: aswf/ci-ocio:${{ matrix.vfx-cy }}
    strategy:
      matrix:
        build: [1,2,3,4]
        include:
        - build: 1
          build-type: Release
          cxx-standard: 17
          cxx-compiler: g++
          cc-compiler: gcc
          compiler-desc: gcc11.2.1
          vfx-cy: 2024
        - build: 2
          build-type: Release
          cxx-standard: 17
          cxx-compiler: clang++
          cc-compiler: clang
          compiler-desc: clang15.0
          vfx-cy: 2024
        - build: 3
          build-type: Debug
          cxx-standard: 17
          cxx-compiler: g++
          cc-compiler: gcc
          compiler-desc: gcc11.2.1
          vfx-cy: 2024
        - build: 4
          build-type: Debug
          cxx-standard: 17
          cxx-compiler: clang++
          cc-compiler: clang
          compiler-desc: clang15.0
          vfx-cy: 2024
    env:
      CXX: ${{ matrix.cxx-compiler }}
      CC: ${{ matrix.cc-compiler }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
      - name: Configure
        run: |
          cmake ../. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_CXX_STANDARD=${{ matrix.cxx-standard }}
        working-directory: _build
      - name: Build
        run: |
          cmake --build . \
                --target install \
                --config ${{ matrix.build-type }} \
                -- -j4
        working-directory: _build
      - name: Test
        run: |
          ctest -T Test \
                --timeout 7200 \
                --output-on-failure \
                -VV
        working-directory: _build

  # --------------------------------------------------------------------

  macos:
    name: 'macOS VFXP-${{matrix.vfx-cy }} macos-${{ matrix.osver }}
      <AppleClang
       arch=${{ matrix.arch-type }},
       config=${{ matrix.build-type }},
       shared=${{ matrix.build-shared }},
       cxx=${{ matrix.cxx-standard }}'
    runs-on: macos-${{ matrix.osver }}
    strategy:
      matrix:
        build: [1, 2, 3, 4]
        include:
          # --------------------------------------------------------------------
          # MacOS 14
          # --------------------------------------------------------------------
          # Release
          - build: 1
            arch-type: "x86_64"
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 17
            osver: 14

          # Debug
          - build: 2
            arch-type: "x86_64"
            build-type: Debug
            build-shared: 'ON'
            cxx-standard: 17
            osver: 14

          # Release
          - build: 3
            arch-type: "x86_64;arm64"
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 17
            osver: 14

          # Debug
          - build: 4
            arch-type: "x86_64;arm64"
            build-type: Debug
            build-shared: 'ON'
            cxx-standard: 17
            osver: 14

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
      - name: Configure
        run: |
          brew install imath
          cmake ../. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_CXX_STANDARD=${{ matrix.cxx-standard }}
        working-directory: _build
      - name: Build
        run: |
          cmake --build . \
                --target install \
                --config ${{ matrix.build-type }} \
                -- -j4
        working-directory: _build
      - name: Test
        run: |
          ctest -T Test \
                --timeout 7200 \
                --output-on-failure \
                -VV
        working-directory: _build
